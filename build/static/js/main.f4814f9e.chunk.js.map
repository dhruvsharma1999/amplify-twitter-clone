{"version":3,"sources":["graphql/queries.js","graphql/subscriptions.js","components/PostList.js","containers/Sidebar.js","graphql/mutations.js","containers/AllPosts.js","containers/PostsBySpecifiedUser.js","aws-exports.js","App.js","reportWebVitals.js","index.js"],"names":["listPostsSortedByTimestamp","listPostsBySpecificOwner","onCreatePost","useStyles","makeStyles","theme","listRoot","width","wordBreak","overflow","borderRight","alignCenter","textAlign","loader","paddingTop","maxWidth","listHeader","position","top","zIndex","backgroundColor","borderBottom","clickable","cursor","PostList","isLoading","posts","getAdditionalPosts","listHeaderTitle","listHeaderTitleButton","classes","className","CircularProgress","size","List","disablePadding","ListItem","alignItems","Typography","variant","fontWeight","map","post","PostItem","Divider","component","ListItemText","primary","Button","onClick","history","useHistory","now","moment","console","log","ListItemAvatar","push","owner","Avatar","alt","src","Fragment","color","display","String","fromCharCode","timestamp","scales","i","length","scale","diff","charAt","calcTimestampDiff","secondary","content","id","drawer","flexShrink","drawerPaper","toolbar","mixins","textField","list","Sidebar","activeListItem","React","useState","value","setValue","isError","setIsError","helperText","setHelperText","onPost","a","API","graphql","graphqlOperation","input","type","Math","floor","Date","res","Drawer","paper","anchor","button","selected","Auth","currentAuthenticatedUser","then","user","ListItemIcon","Public","username","Person","TextField","error","label","multiline","rowsMax","onChange","event","target","fullWidth","margin","disabled","signOut","data","catch","err","SUBSCRIPTION","INITIAL_QUERY","ADDITIONAL_QUERY","reducer","state","action","AllPosts","useReducer","dispatch","nextToken","setNextToken","setIsLoading","getPosts","sortDirection","limit","items","useEffect","subscription","subscribe","next","msg","unsubscribe","PostsBySpecifiedUser","userId","useParams","awsmobile","Amplify","configure","PubSub","createMuiTheme","palette","main","contrastText","background","default","divider","overrides","MuiButton","typography","fontFamily","join","status","danger","root","height","marginLeft","marginRight","appBar","flexGrow","padding","spacing","withAuthenticator","ThemeProvider","CssBaseline","exact","path","to","signUpConfig","hiddenDefaults","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f4814f9e.chunk.js","sourcesContent":["/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const getPost = /* GraphQL */ `\n  query GetPost($id: ID!) {\n    getPost(id: $id) {\n      type\n      id\n      content\n      owner\n      timestamp\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const listPosts = /* GraphQL */ `\n  query ListPosts(\n    $filter: ModelPostFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listPosts(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        type\n        id\n        content\n        owner\n        timestamp\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\nexport const listPostsSortedByTimestamp = /* GraphQL */ `\n  query ListPostsSortedByTimestamp(\n    $type: String\n    $timestamp: ModelIntKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelPostFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listPostsSortedByTimestamp(\n      type: $type\n      timestamp: $timestamp\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        type\n        id\n        content\n        owner\n        timestamp\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\nexport const listPostsBySpecificOwner = /* GraphQL */ `\n  query ListPostsBySpecificOwner(\n    $owner: String\n    $timestamp: ModelIntKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelPostFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listPostsBySpecificOwner(\n      owner: $owner\n      timestamp: $timestamp\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        type\n        id\n        content\n        owner\n        timestamp\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const onCreatePost = /* GraphQL */ `\n  subscription OnCreatePost {\n    onCreatePost {\n      type\n      id\n      content\n      owner\n      timestamp\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onUpdatePost = /* GraphQL */ `\n  subscription OnUpdatePost {\n    onUpdatePost {\n      type\n      id\n      content\n      owner\n      timestamp\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onDeletePost = /* GraphQL */ `\n  subscription OnDeletePost {\n    onDeletePost {\n      type\n      id\n      content\n      owner\n      timestamp\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","import React from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Button,\n  List,\n  ListItem,\n  Divider,\n  ListItemText,\n  ListItemAvatar,\n  Avatar,\n  Typography,\n  CircularProgress,\n} from \"@material-ui/core\";\n\nimport { useHistory } from \"react-router\";\nimport moment from \"moment\";\n\nconst useStyles = makeStyles((theme) => ({\n  listRoot: {\n    width: \"100%\",\n    wordBreak: \"break-all\",\n    overflow: \"scroll\",\n    borderRight: \"1px solid #37444C\",\n  },\n  alignCenter: {\n    textAlign: \"center\",\n  },\n  loader: {\n    textAlign: \"center\",\n    paddingTop: 20,\n  },\n  maxWidth: {\n    width: \"100%\",\n  },\n  listHeader: {\n    position: \"sticky\",\n    top: 0,\n    zIndex: 1200,\n    backgroundColor: \"#15202B\",\n    borderBottom: \"1px solid #37444C\",\n  },\n  clickable: {\n    cursor: \"pointer\",\n  },\n}));\n\nexport default function PostList({\n  isLoading,\n  posts,\n  getAdditionalPosts,\n  listHeaderTitle,\n  listHeaderTitleButton,\n}) {\n  const classes = useStyles();\n  return (\n    <div className={classes.listRoot}>\n      {isLoading ? (\n        <div className={classes.loader}>\n          <CircularProgress size={25} />\n        </div>\n      ) : (\n        <List disablePadding>\n          <ListItem alignItems=\"flex-start\" className={classes.listHeader}>\n            <Typography variant=\"h5\" fontWeight=\"fontWeightBold\" maxWidth>\n              {listHeaderTitle}\n              {listHeaderTitleButton && listHeaderTitleButton}\n            </Typography>\n          </ListItem>\n          {posts.map((post) => (\n            <span>\n              <PostItem post={post} />\n              <Divider component=\"li\" />\n            </span>\n          ))}\n          <ListItem\n            alignItems=\"flex-start\"\n            className={classes.alignCenter}\n            key=\"loadmore\"\n          >\n            <ListItemText\n              primary={\n                <Button\n                  variant=\"outlined\"\n                  onClick={() => getAdditionalPosts()}\n                  className={classes.maxWidth}\n                >\n                  {\" \"}\n                  Read More{\" \"}\n                </Button>\n              }\n            />\n          </ListItem>\n        </List>\n      )}\n    </div>\n  );\n}\n\nfunction PostItem({ post }) {\n  const classes = useStyles();\n  const history = useHistory();\n  const now = moment();\n  console.log(now);\n\n  const calcTimestampDiff = (timestamp) => {\n    const scales = [\n      \"years\",\n      \"months\",\n      \"weeks\",\n      \"days\",\n      \"hours\",\n      \"minutes\",\n      \"seconds\",\n    ];\n\n    for (let i = 0; i < scales.length; i++) {\n      const scale = scales[i];\n      const diff = moment(now).diff(timestamp * 1000, scale);\n      if (diff > 0) return diff + scale.charAt(0);\n    }\n\n    return 0 + scales[scales.length - 1].charAt(0);\n  };\n\n  return (\n    <ListItem alignItems=\"flex-start\" key={post.id}>\n      <ListItemAvatar>\n        <div\n          className={classes.clickable}\n          onClick={() => history.push(\"/\" + post.owner)}\n        >\n          <Avatar alt={post.owner} src=\"/\" />\n        </div>\n      </ListItemAvatar>\n      <ListItemText\n        primary={\n          <React.Fragment>\n            {post.owner}\n            <Typography color=\"textSecondary\" display=\"inline\">\n              {\" \" +\n                String.fromCharCode(183) +\n                \" \" +\n                calcTimestampDiff(post.timestamp)}\n            </Typography>\n          </React.Fragment>\n        }\n        secondary={<Typography color=\"textPrimary\">{post.content}</Typography>}\n      />\n    </ListItem>\n  );\n}\n","import React from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Button,\n  Drawer,\n  List,\n  ListItem,\n  ListItemText,\n  TextField,\n  ListItemIcon,\n} from \"@material-ui/core\";\nimport { Person as PersonIcon, Public as PublicIcon } from \"@material-ui/icons\";\n\nimport API, { graphqlOperation } from \"@aws-amplify/api\";\nimport Auth from \"@aws-amplify/auth\";\n\nimport { createPost } from \"../graphql/mutations\";\nimport { useHistory } from \"react-router\";\n\nconst drawerWidth = 340;\nconst MAX_POST_CONTENT_LENGTH = 140;\n\nconst useStyles = makeStyles((theme) => ({\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    position: \"relative\",\n  },\n  drawerPaper: {\n    width: drawerWidth,\n    position: \"relative\",\n  },\n  toolbar: theme.mixins.toolbar,\n  textField: {\n    width: drawerWidth,\n  },\n  list: {\n    // overflowWrap: 'break-word',\n    width: 300,\n  },\n}));\n\nexport default function Sidebar({ activeListItem }) {\n  const classes = useStyles();\n  const history = useHistory();\n\n  const [value, setValue] = React.useState(\"\");\n  const [isError, setIsError] = React.useState(false);\n  const [helperText, setHelperText] = React.useState(\"\");\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n    if (event.target.value.length > MAX_POST_CONTENT_LENGTH) {\n      setIsError(true);\n      setHelperText(MAX_POST_CONTENT_LENGTH - event.target.value.length);\n    } else {\n      setIsError(false);\n      setHelperText(\"\");\n    }\n  };\n\n  const onPost = async () => {\n    const res = await API.graphql(\n      graphqlOperation(createPost, {\n        input: {\n          type: \"post\",\n          content: value,\n          timestamp: Math.floor(Date.now() / 1000),\n        },\n      })\n    );\n\n    console.log(res);\n    setValue(\"\");\n  };\n\n  const signOut = () => {\n    Auth.signOut()\n      .then((data) => console.log(data))\n      .catch((err) => console.log(err));\n  };\n\n  return (\n    <Drawer\n      className={classes.drawer}\n      variant=\"permanent\"\n      classes={{\n        paper: classes.drawerPaper,\n      }}\n      anchor=\"left\"\n    >\n      <div className={classes.toolbar} />\n      <List>\n        <ListItem\n          button\n          selected={activeListItem === \"global-timeline\"}\n          onClick={() => {\n            Auth.currentAuthenticatedUser().then((user) => {\n              history.push(\"/global-timeline\");\n            });\n          }}\n          key=\"global-timeline\"\n        >\n          <ListItemIcon>\n            <PublicIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Global Timeline\" />\n        </ListItem>\n        <ListItem\n          button\n          selected={activeListItem === \"profile\"}\n          onClick={() => {\n            Auth.currentAuthenticatedUser().then((user) => {\n              history.push(\"/\" + user.username);\n            });\n          }}\n          key=\"profile\"\n        >\n          <ListItemIcon>\n            <PersonIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Profile\" />\n        </ListItem>\n        <ListItem key=\"post-input-field\">\n          <ListItemText\n            primary={\n              <TextField\n                error={isError}\n                helperText={helperText}\n                id=\"post-input\"\n                label=\"Type your post!\"\n                multiline\n                rowsMax=\"8\"\n                variant=\"filled\"\n                value={value}\n                onChange={handleChange}\n                fullWidth\n                margin=\"normal\"\n              />\n            }\n          />\n        </ListItem>\n        <ListItem key=\"post-button\">\n          <ListItemText\n            primary={\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                disabled={isError}\n                onClick={onPost}\n                fullWidth\n              >\n                Post\n              </Button>\n            }\n          />\n        </ListItem>\n        <ListItem key=\"logout\">\n          <ListItemText\n            primary={\n              <Button variant=\"outlined\" onClick={signOut} fullWidth>\n                Logout\n              </Button>\n            }\n          />\n        </ListItem>\n      </List>\n    </Drawer>\n  );\n}\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const createPost = /* GraphQL */ `\n  mutation CreatePost(\n    $input: CreatePostInput!\n    $condition: ModelPostConditionInput\n  ) {\n    createPost(input: $input, condition: $condition) {\n      type\n      id\n      content\n      owner\n      timestamp\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const updatePost = /* GraphQL */ `\n  mutation UpdatePost(\n    $input: UpdatePostInput!\n    $condition: ModelPostConditionInput\n  ) {\n    updatePost(input: $input, condition: $condition) {\n      type\n      id\n      content\n      owner\n      timestamp\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const deletePost = /* GraphQL */ `\n  mutation DeletePost(\n    $input: DeletePostInput!\n    $condition: ModelPostConditionInput\n  ) {\n    deletePost(input: $input, condition: $condition) {\n      type\n      id\n      content\n      owner\n      timestamp\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","import React, { useState, useEffect, useReducer } from \"react\";\n\nimport API, { graphqlOperation } from \"@aws-amplify/api\";\n\nimport { listPostsSortedByTimestamp } from \"../graphql/queries\";\nimport { onCreatePost } from \"../graphql/subscriptions\";\n\nimport PostList from \"../components/PostList\";\nimport Sidebar from \"./Sidebar\";\n\nconst SUBSCRIPTION = \"SUBSCRIPTION\";\nconst INITIAL_QUERY = \"INITIAL_QUERY\";\nconst ADDITIONAL_QUERY = \"ADDITIONAL_QUERY\";\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case INITIAL_QUERY:\n      return action.posts;\n    case ADDITIONAL_QUERY:\n      return [...state, ...action.posts];\n    case SUBSCRIPTION:\n      return [action.post, ...state];\n    default:\n      return state;\n  }\n};\n\nexport default function AllPosts() {\n  const [posts, dispatch] = useReducer(reducer, []);\n  const [nextToken, setNextToken] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const getPosts = async (type, nextToken = null) => {\n    const res = await API.graphql(\n      graphqlOperation(listPostsSortedByTimestamp, {\n        type: \"post\",\n        sortDirection: \"DESC\",\n        limit: 20, //default = 10\n        nextToken: nextToken,\n      })\n    );\n    console.log(res);\n    dispatch({ type: type, posts: res.data.listPostsSortedByTimestamp.items });\n    setNextToken(res.data.listPostsSortedByTimestamp.nextToken);\n    setIsLoading(false);\n  };\n\n  const getAdditionalPosts = () => {\n    if (nextToken === null) return; //Reached the last page\n    getPosts(ADDITIONAL_QUERY, nextToken);\n  };\n\n  useEffect(() => {\n    getPosts(INITIAL_QUERY);\n\n    const subscription = API.graphql(graphqlOperation(onCreatePost)).subscribe({\n      next: (msg) => {\n        console.log(\"allposts subscription fired\");\n        const post = msg.value.data.onCreatePost;\n        dispatch({ type: SUBSCRIPTION, post: post });\n      },\n    });\n    return () => subscription.unsubscribe();\n  }, []);\n\n  return (\n    <React.Fragment>\n      <Sidebar activeListItem=\"global-timeline\" />\n      <PostList\n        isLoading={isLoading}\n        posts={posts}\n        getAdditionalPosts={getAdditionalPosts}\n        listHeaderTitle={\"Global Timeline\"}\n      />\n    </React.Fragment>\n  );\n}\n","import React, { useState, useEffect, useReducer } from \"react\";\n\nimport API, { graphqlOperation } from \"@aws-amplify/api\";\nimport { useParams } from \"react-router\";\n\nimport { listPostsBySpecificOwner } from \"../graphql/queries\";\nimport { onCreatePost } from \"../graphql/subscriptions\";\nimport PostList from \"../components/PostList\";\nimport Sidebar from \"./Sidebar\";\n\nconst SUBSCRIPTION = \"SUBSCRIPTION\";\nconst INITIAL_QUERY = \"INITIAL_QUERY\";\nconst ADDITIONAL_QUERY = \"ADDITIONAL_QUERY\";\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case INITIAL_QUERY:\n      return action.posts;\n    case ADDITIONAL_QUERY:\n      return [...state, ...action.posts];\n    case SUBSCRIPTION:\n      return [action.post, ...state];\n    default:\n      return state;\n  }\n};\n\nexport default function PostsBySpecifiedUser() {\n  const { userId } = useParams();\n\n  const [posts, dispatch] = useReducer(reducer, []);\n  const [nextToken, setNextToken] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const getPosts = async (type, nextToken = null) => {\n    const res = await API.graphql(\n      graphqlOperation(listPostsBySpecificOwner, {\n        owner: userId,\n        sortDirection: \"DESC\",\n        limit: 20,\n        nextToken: nextToken,\n      })\n    );\n    console.log(res);\n    dispatch({ type: type, posts: res.data.listPostsBySpecificOwner.items });\n    setNextToken(res.data.listPostsBySpecificOwner.nextToken);\n    setIsLoading(false);\n  };\n\n  const getAdditionalPosts = () => {\n    if (nextToken === null) return; //Reached the last page\n    getPosts(ADDITIONAL_QUERY, nextToken);\n  };\n\n  useEffect(() => {\n    getPosts(INITIAL_QUERY);\n\n    const subscription = API.graphql(graphqlOperation(onCreatePost)).subscribe({\n      next: (msg) => {\n        const post = msg.value.data.onCreatePost;\n        if (post.owner !== userId) return;\n        dispatch({ type: SUBSCRIPTION, post: post });\n      },\n    });\n    return () => subscription.unsubscribe();\n  }, []);\n\n  return (\n    <React.Fragment>\n      <Sidebar activeListItem=\"profile\" />\n      <PostList\n        isLoading={isLoading}\n        posts={posts}\n        getAdditionalPosts={getAdditionalPosts}\n        listHeaderTitle={userId}\n      />\n    </React.Fragment>\n  );\n}\n","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"ap-southeast-2\",\n    \"aws_cognito_identity_pool_id\": \"ap-southeast-2:eaf9e55e-0bbe-4605-95c6-97c1b728984a\",\n    \"aws_cognito_region\": \"ap-southeast-2\",\n    \"aws_user_pools_id\": \"ap-southeast-2_DkcOV67sf\",\n    \"aws_user_pools_web_client_id\": \"2qhaje25kk4qt92sg30tlo4f4n\",\n    \"oauth\": {},\n    \"aws_appsync_graphqlEndpoint\": \"https://kes3mh6n7rhhpmssnxf4bi2n2y.appsync-api.ap-southeast-2.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"ap-southeast-2\",\n    \"aws_appsync_authenticationType\": \"AMAZON_COGNITO_USER_POOLS\",\n    \"aws_appsync_apiKey\": \"da2-fakeApiId123456\"\n};\n\n\nexport default awsmobile;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { withAuthenticator } from \"aws-amplify-react\";\n\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\n\nimport {\n  makeStyles,\n  createMuiTheme,\n  ThemeProvider,\n} from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nimport AllPosts from \"./containers/AllPosts\";\nimport PostsBySpecifiedUser from \"./containers/PostsBySpecifiedUser\";\n\nimport Amplify from \"@aws-amplify/core\";\nimport PubSub from \"@aws-amplify/pubsub\";\nimport awsmobile from \"./aws-exports\";\n\nAmplify.configure(awsmobile);\nPubSub.configure(awsmobile);\n\nconst drawerWidth = 240;\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n    primary: {\n      main: \"#1EA1F2\",\n      contrastText: \"#fff\",\n    },\n    background: {\n      default: \"#15202B\",\n      paper: \"#15202B\",\n    },\n    divider: \"#37444C\",\n  },\n  overrides: {\n    MuiButton: {\n      color: \"white\",\n    },\n  },\n  typography: {\n    fontFamily: [\"Arial\"].join(\",\"),\n  },\n  status: {\n    danger: \"orange\",\n  },\n});\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    height: \"100%\",\n    width: 800,\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n  },\n  appBar: {\n    marginLeft: drawerWidth,\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  toolbar: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(3),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <HashRouter>\n          <Switch>\n            <Route exact path=\"/\" component={AllPosts} />\n            <Route exact path=\"/global-timeline\" component={AllPosts} />\n            <Route exact path=\"/:userId\" component={PostsBySpecifiedUser} />\n            <Redirect path=\"*\" to=\"/\" />\n          </Switch>\n        </HashRouter>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default withAuthenticator(App, {\n  signUpConfig: {\n    hiddenDefaults: [\"phone_number\"],\n  },\n});\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}